// Generated by CoffeeScript 1.11.1

/*

Polyline Graph Topology Generator.

Generates Halfedge Topology associated with Polyline Graph Data Objects.

Written by Bryce Summers
Move to its own file on 3 - 7 - 2017.
 */

(function() {
  SCRIB.PolylineGraphGenerator = (function() {
    function PolylineGraphGenerator(_graph) {
      this._graph = _graph;
    }

    PolylineGraphGenerator.prototype.newGraph = function() {
      return SCRIB.PolylineGraphEmbedder.newGraph();
    };

    PolylineGraphGenerator.prototype.newFace = function(graph) {
      if (!graph) {
        graph = this._graph;
      }
      return SCRIB.PolylineGraphEmbedder.newFace(graph);
    };

    PolylineGraphGenerator.prototype.newEdge = function(graph) {
      if (!graph) {
        graph = this._graph;
      }
      return SCRIB.PolylineGraphEmbedder.newEdge(graph);
    };

    PolylineGraphGenerator.prototype.newHalfedge = function(graph) {
      if (!graph) {
        graph = this._graph;
      }
      return SCRIB.PolylineGraphEmbedder.newHalfedge(graph);
    };

    PolylineGraphGenerator.prototype.newVertex = function(graph) {
      if (!graph) {
        graph = this._graph;
      }
      return SCRIB.PolylineGraphEmbedder.newVertex(graph);
    };

    PolylineGraphGenerator.prototype.line_side_test = function(vert1, vert2, vert3) {
      var pt_c, ray;
      pt_c = vert3.data.point;
      ray = this._ray(vert1, vert2);
      return ray.line_side_test(pt_c);
    };

    PolylineGraphGenerator.prototype.vert_in_angle = function(vert_a, vert_b, vert_c, vert_pt) {
      var angle1, angle2, angle_pt, ray1, ray2, ray_pt;
      ray1 = this._ray(vert_b, vert_c);
      ray2 = this._ray(vert_b, vert_a);
      ray_pt = this._ray(vert_b, vert_pt);
      angle1 = ray1.getAngle();
      angle2 = ray2.getAngle();
      angle_pt = ray_pt.getAngle();
      if (angle2 <= angle1) {
        angle2 += Math.PI * 2;
      }
      if (angle_pt < angle1) {
        angle_pt += Math.PI * 2;
      }
      return angle1 <= angle_pt && angle_pt <= angle2;
    };

    PolylineGraphGenerator.prototype._ray = function(v1, v2) {
      var a, b, dir, ray;
      a = v1.data.point;
      b = v2.data.point;
      dir = b.sub(a);
      ray = new BDS.Ray(a, dir, 1);
      return ray;
    };

    return PolylineGraphGenerator;

  })();

}).call(this);

//# sourceMappingURL=polylineGraphGenerator.js.map
