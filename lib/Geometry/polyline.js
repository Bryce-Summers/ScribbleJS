// Generated by CoffeeScript 1.11.1

/*
Polyline class

Written by Bryce Summers on 1 - 4 - 2017.

Note: Closed Polylines are polygons...
 - So we will put all of our polygon code into this class.
 */

(function() {
  SCRIB.Polyline = (function() {
    function Polyline(_isclosed, points_in) {
      this._isclosed = _isclosed;
      if (this._isClosed === void 0) {
        this._isclosed = false;
      }
      this._points = [];
      if (points_in) {
        this.appendPoints(points_in);
      }
    }

    Polyline.prototype.appendPoints = function(array) {
      var j, len1, p, results;
      results = [];
      for (j = 0, len1 = array.length; j < len1; j++) {
        p = array[j];
        results.push(this.addPoint(p));
      }
      return results;
    };

    Polyline.prototype.addPoint = function(p) {
      return this._points.push(p);
    };

    Polyline.prototype.removeLastPoint = function() {
      return this._points.pop();
    };

    Polyline.prototype.getPoint = function(index) {
      return this._points[index];
    };

    Polyline.prototype.size = function() {
      return this._points.length;
    };

    Polyline.prototype.isClosed = function() {
      return this._isclosed;
    };


    /*
    * http://math.blogoverflow.com/2014/06/04/greens-theorem-and-area-of-polygons/
    * Computes the area of a 2D polygon directly from the polygon's coordinates.
    * The area will be positive or negative depending on the
    * clockwise / counter clockwise orientation of the points.
    * Also see: https://brycesummers.wordpress.com/2015/08/24/a-proof-of-simple-polygonal-area-via-greens-theorem/
    * Note: This function interprets this polyline as closed.
     *  -> float
     */

    Polyline.prototype.computeArea = function() {
      var area, i, j, len, p1, p2, ref;
      len = this._points.length;
      p1 = this._points[len - 1];
      area = 0.0;
      for (i = j = 0, ref = len; j < ref; i = j += 1) {
        p2 = this._points[i];
        area += (p2.x + p1.x) * (p2.y - p1.y);
        p1 = p2;
      }
      return area / 2.0;
    };

    Polyline.prototype.isComplemented = function() {
      return this.computeArea() > 0;
    };

    return Polyline;

  })();

}).call(this);
