// Generated by CoffeeScript 1.11.1

/*

Face Graph.

Written by Bryce Summers on 2 - 12 - 2017.

Purpose: Represents face to face connectivity, such as that needed for coloring.
 */

(function() {
  SCRIB.FaceGraph = (function() {
    function FaceGraph(graph) {
      var edge, face, face1, face2, halfedge, iter;
      this.faces = {};
      iter = graph.facesBegin();
      while (iter.hasNext()) {
        face = iter.next();
        this.faces[face.id] = [];
      }
      iter = graph.edgesBegin();
      while (iter.hasNext()) {
        edge = iter.next();
        halfedge = edge.halfedge;
        face1 = halfedge.face;
        face2 = halfedge.twin.face;
        this.faces[face1.id].push(face2);
        this.faces[face2.id].push(face1);
      }
    }

    FaceGraph.prototype.autoColor = function() {
      var face_id_order, i, id_degree, id_degrees, key, len, ref, value;
      id_degrees = [];
      ref = this.faces;
      for (key in ref) {
        value = ref[key];
        id_degrees.push([parseInt(key), value.length]);
      }

      /*
      id_degrees.sort(
          (a, b) -> 
              degree1 = a[1]
              degree2 = b[1]
              return degree1 - degree2
          )
       */
      face_id_order = [];
      for (i = 0, len = id_degrees.length; i < len; i++) {
        id_degree = id_degrees[i];
        face_id_order.push(id_degree[0]);
      }
      return this.greedyColor(face_id_order);
    };

    FaceGraph.prototype.greedyColor = function(face_id_order) {
      var colored, coloring, face, face_id, i, index, j, len, len1, neighbors, taken;
      coloring = {};
      colored = new Set();
      for (i = 0, len = face_id_order.length; i < len; i++) {
        face_id = face_id_order[i];
        neighbors = this.faces[face_id];
        taken = new Set();
        for (j = 0, len1 = neighbors.length; j < len1; j++) {
          face = neighbors[j];
          if (!colored.has(face.id)) {
            continue;
          }
          taken.add(coloring[face.id]);
        }
        index = 0;
        while (taken.has(index)) {
          index++;
        }
        coloring[face_id] = index;
        colored.add(face_id);
      }
      return coloring;
    };

    return FaceGraph;

  })();

}).call(this);
